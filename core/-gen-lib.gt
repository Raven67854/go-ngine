package gt

//	Only used for __L__
type __T__Lib []__T__

func (me *__T__Lib) AddNew() (ref *__T__) {
	id := -1
	for i := 0; i < len(*me); i++ {
		if (*me)[i].ID < 0 {
			id = i
			break
		}
	}
	if id < 0 {
		if id = len(*me); id == cap(*me) {
			nu := make(__T__Lib, id, id+Options.Libs.GrowCapBy)
			copy(nu, *me)
			*me = nu
		}
		*me = append(*me, __T__{})
	}
	ref = &(*me)[id]
	ref.ID = id
	ref.init()
	return
}

func (me *__T__Lib) Compact() {
	var (
		before, after []__T__
		ref           *__T__
		oldID, i      int
	)
	for i = 0; i < len(*me); i++ {
		if (*me)[i].ID < 0 {
			before, after = (*me)[:i], (*me)[i+1:]
			*me = append(before, after...)
		}
	}
	changed := make(map[int]int, len(*me))
	for i = 0; i < len(*me); i++ {
		if ref = &(*me)[i]; ref.ID != i {
			oldID, ref.ID = ref.ID, i
			changed[oldID] = i
		}
	}
	if len(changed) > 0 {
		me.on__T__IDsChanged(changed)
	}
}

func (me *__T__Lib) ctor() {
	*me = make(__T__Lib, 0, Options.Libs.InitialCap)
}

func (me *__T__Lib) dispose() {
	me.Remove(0, 0)
	*me = (*me)[:0]
}

func (me __T__Lib) Get(id int) (ref *__T__) {
	if id > -1 && id < len(me) {
		if ref = &me[id]; ref.ID != id {
			ref = nil
		}
	}
	return
}

func (me __T__Lib) IsOk(id int) (ok bool) {
	if id > -1 && id < len(me) {
		ok = me[id].ID == id
	}
	return
}

func (me __T__Lib) Ok(id int) bool {
	return me[id].ID == id
}

func (me __T__Lib) Remove(fromID, num int) {
	if l := len(me); fromID < l {
		if num < 1 || num > (l-fromID) {
			num = l - fromID
		}
		changed := make(map[int]int, num)
		for id := fromID; id < fromID+num; id++ {
			me[id].dispose()
			changed[id], me[id].ID = -1, -1
		}
		me.on__T__IDsChanged(changed)
	}
}

func (me __T__Lib) Walk(on func(ref *__T__)) {
	for id := 0; id < len(me); id++ {
		if me[id].ID > -1 {
			on(&me[id])
		}
	}
}
